/* tslint:disable */
/* eslint-disable */
/**
 * Weather API
 * API provides access to summarized weather data parsed from the UK MetOffice.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Climate Record Serializer
 * @export
 * @interface ClimateRecord
 */
export interface ClimateRecord {
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'id': number;
    /**
     * 
     * @type {DatasetEnum}
     * @memberof ClimateRecord
     */
    'dataset': DatasetEnum;
    /**
     * 
     * @type {RegionEnum}
     * @memberof ClimateRecord
     */
    'region': RegionEnum;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'year': number;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'jan'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'feb'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'mar'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'apr'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'may'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'jun'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'jul'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'aug'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'sep'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'oct'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'nov'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'dec'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'win'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'spr'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'sum'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'aut'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClimateRecord
     */
    'ann'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ClimateRecord
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof ClimateRecord
     */
    'updated_on': string;
}


/**
 * * `air_frost` - Air Frost * `raindays` - Rain Days ≥1mm * `rainfall` - Rainfall * `sunshine` - Sunshine * `tmean` - Mean Temperature * `tmin` - Minimum Temperature * `tmax` - Maximum Temperature
 * @export
 * @enum {string}
 */

export const DatasetEnum = {
    AirFrost: 'air_frost',
    Raindays: 'raindays',
    Rainfall: 'rainfall',
    Sunshine: 'sunshine',
    Tmean: 'tmean',
    Tmin: 'tmin',
    Tmax: 'tmax'
} as const;

export type DatasetEnum = typeof DatasetEnum[keyof typeof DatasetEnum];


/**
 * 
 * @export
 * @interface PaginatedClimateRecordList
 */
export interface PaginatedClimateRecordList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedClimateRecordList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedClimateRecordList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedClimateRecordList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<ClimateRecord>}
     * @memberof PaginatedClimateRecordList
     */
    'results': Array<ClimateRecord>;
}
/**
 * * `UK` - UK * `England` - England * `Wales` - Wales * `Scotland` - Scotland * `Northern_Ireland` - Northern Ireland * `England_and_Wales` - England and Wales * `England_N` - England North * `England_S` - England South * `Scotland_N` - Scotland North * `Scotland_E` - Scotland East * `Scotland_W` - Scotland West * `England_E_and_NE` - England East and NE * `England_NW_and_N_Wales` - England NW and North Wales * `Midlands` - Midlands * `East_Anglia` - East Anglia * `England_SW_and_S_Wales` - England SW and South Wales * `England_SE_and_Central_S` - England SE and Central South
 * @export
 * @enum {string}
 */

export const RegionEnum = {
    Uk: 'UK',
    England: 'England',
    Wales: 'Wales',
    Scotland: 'Scotland',
    NorthernIreland: 'Northern_Ireland',
    EnglandAndWales: 'England_and_Wales',
    EnglandN: 'England_N',
    EnglandS: 'England_S',
    ScotlandN: 'Scotland_N',
    ScotlandE: 'Scotland_E',
    ScotlandW: 'Scotland_W',
    EnglandEAndNe: 'England_E_and_NE',
    EnglandNwAndNWales: 'England_NW_and_N_Wales',
    Midlands: 'Midlands',
    EastAnglia: 'East_Anglia',
    EnglandSwAndSWales: 'England_SW_and_S_Wales',
    EnglandSeAndCentralS: 'England_SE_and_Central_S'
} as const;

export type RegionEnum = typeof RegionEnum[keyof typeof RegionEnum];



/**
 * ClimateApi - axios parameter creator
 * @export
 */
export const ClimateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Climate Record ViewSet
         * @param {ClimateListDatasetEnum} [dataset] * &#x60;air_frost&#x60; - Air Frost * &#x60;raindays&#x60; - Rain Days ≥1mm * &#x60;rainfall&#x60; - Rainfall * &#x60;sunshine&#x60; - Sunshine * &#x60;tmean&#x60; - Mean Temperature * &#x60;tmin&#x60; - Minimum Temperature * &#x60;tmax&#x60; - Maximum Temperature
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {ClimateListRegionEnum} [region] * &#x60;UK&#x60; - UK * &#x60;England&#x60; - England * &#x60;Wales&#x60; - Wales * &#x60;Scotland&#x60; - Scotland * &#x60;Northern_Ireland&#x60; - Northern Ireland * &#x60;England_and_Wales&#x60; - England and Wales * &#x60;England_N&#x60; - England North * &#x60;England_S&#x60; - England South * &#x60;Scotland_N&#x60; - Scotland North * &#x60;Scotland_E&#x60; - Scotland East * &#x60;Scotland_W&#x60; - Scotland West * &#x60;England_E_and_NE&#x60; - England East and NE * &#x60;England_NW_and_N_Wales&#x60; - England NW and North Wales * &#x60;Midlands&#x60; - Midlands * &#x60;East_Anglia&#x60; - East Anglia * &#x60;England_SW_and_S_Wales&#x60; - England SW and South Wales * &#x60;England_SE_and_Central_S&#x60; - England SE and Central South
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climateList: async (dataset?: ClimateListDatasetEnum, limit?: number, offset?: number, region?: ClimateListRegionEnum, year?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/climate/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required

            if (dataset !== undefined) {
                localVarQueryParameter['dataset'] = dataset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Climate Record ViewSet
         * @param {number} id A unique integer value identifying this climate record.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climateRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('climateRetrieve', 'id', id)
            const localVarPath = `/api/climate/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication cookieAuth required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClimateApi - functional programming interface
 * @export
 */
export const ClimateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClimateApiAxiosParamCreator(configuration)
    return {
        /**
         * Climate Record ViewSet
         * @param {ClimateListDatasetEnum} [dataset] * &#x60;air_frost&#x60; - Air Frost * &#x60;raindays&#x60; - Rain Days ≥1mm * &#x60;rainfall&#x60; - Rainfall * &#x60;sunshine&#x60; - Sunshine * &#x60;tmean&#x60; - Mean Temperature * &#x60;tmin&#x60; - Minimum Temperature * &#x60;tmax&#x60; - Maximum Temperature
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {ClimateListRegionEnum} [region] * &#x60;UK&#x60; - UK * &#x60;England&#x60; - England * &#x60;Wales&#x60; - Wales * &#x60;Scotland&#x60; - Scotland * &#x60;Northern_Ireland&#x60; - Northern Ireland * &#x60;England_and_Wales&#x60; - England and Wales * &#x60;England_N&#x60; - England North * &#x60;England_S&#x60; - England South * &#x60;Scotland_N&#x60; - Scotland North * &#x60;Scotland_E&#x60; - Scotland East * &#x60;Scotland_W&#x60; - Scotland West * &#x60;England_E_and_NE&#x60; - England East and NE * &#x60;England_NW_and_N_Wales&#x60; - England NW and North Wales * &#x60;Midlands&#x60; - Midlands * &#x60;East_Anglia&#x60; - East Anglia * &#x60;England_SW_and_S_Wales&#x60; - England SW and South Wales * &#x60;England_SE_and_Central_S&#x60; - England SE and Central South
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async climateList(dataset?: ClimateListDatasetEnum, limit?: number, offset?: number, region?: ClimateListRegionEnum, year?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedClimateRecordList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.climateList(dataset, limit, offset, region, year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClimateApi.climateList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Climate Record ViewSet
         * @param {number} id A unique integer value identifying this climate record.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async climateRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClimateRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.climateRetrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClimateApi.climateRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClimateApi - factory interface
 * @export
 */
export const ClimateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClimateApiFp(configuration)
    return {
        /**
         * Climate Record ViewSet
         * @param {ClimateListDatasetEnum} [dataset] * &#x60;air_frost&#x60; - Air Frost * &#x60;raindays&#x60; - Rain Days ≥1mm * &#x60;rainfall&#x60; - Rainfall * &#x60;sunshine&#x60; - Sunshine * &#x60;tmean&#x60; - Mean Temperature * &#x60;tmin&#x60; - Minimum Temperature * &#x60;tmax&#x60; - Maximum Temperature
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {ClimateListRegionEnum} [region] * &#x60;UK&#x60; - UK * &#x60;England&#x60; - England * &#x60;Wales&#x60; - Wales * &#x60;Scotland&#x60; - Scotland * &#x60;Northern_Ireland&#x60; - Northern Ireland * &#x60;England_and_Wales&#x60; - England and Wales * &#x60;England_N&#x60; - England North * &#x60;England_S&#x60; - England South * &#x60;Scotland_N&#x60; - Scotland North * &#x60;Scotland_E&#x60; - Scotland East * &#x60;Scotland_W&#x60; - Scotland West * &#x60;England_E_and_NE&#x60; - England East and NE * &#x60;England_NW_and_N_Wales&#x60; - England NW and North Wales * &#x60;Midlands&#x60; - Midlands * &#x60;East_Anglia&#x60; - East Anglia * &#x60;England_SW_and_S_Wales&#x60; - England SW and South Wales * &#x60;England_SE_and_Central_S&#x60; - England SE and Central South
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climateList(dataset?: ClimateListDatasetEnum, limit?: number, offset?: number, region?: ClimateListRegionEnum, year?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedClimateRecordList> {
            return localVarFp.climateList(dataset, limit, offset, region, year, options).then((request) => request(axios, basePath));
        },
        /**
         * Climate Record ViewSet
         * @param {number} id A unique integer value identifying this climate record.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        climateRetrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ClimateRecord> {
            return localVarFp.climateRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClimateApi - object-oriented interface
 * @export
 * @class ClimateApi
 * @extends {BaseAPI}
 */
export class ClimateApi extends BaseAPI {
    /**
     * Climate Record ViewSet
     * @param {ClimateListDatasetEnum} [dataset] * &#x60;air_frost&#x60; - Air Frost * &#x60;raindays&#x60; - Rain Days ≥1mm * &#x60;rainfall&#x60; - Rainfall * &#x60;sunshine&#x60; - Sunshine * &#x60;tmean&#x60; - Mean Temperature * &#x60;tmin&#x60; - Minimum Temperature * &#x60;tmax&#x60; - Maximum Temperature
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {ClimateListRegionEnum} [region] * &#x60;UK&#x60; - UK * &#x60;England&#x60; - England * &#x60;Wales&#x60; - Wales * &#x60;Scotland&#x60; - Scotland * &#x60;Northern_Ireland&#x60; - Northern Ireland * &#x60;England_and_Wales&#x60; - England and Wales * &#x60;England_N&#x60; - England North * &#x60;England_S&#x60; - England South * &#x60;Scotland_N&#x60; - Scotland North * &#x60;Scotland_E&#x60; - Scotland East * &#x60;Scotland_W&#x60; - Scotland West * &#x60;England_E_and_NE&#x60; - England East and NE * &#x60;England_NW_and_N_Wales&#x60; - England NW and North Wales * &#x60;Midlands&#x60; - Midlands * &#x60;East_Anglia&#x60; - East Anglia * &#x60;England_SW_and_S_Wales&#x60; - England SW and South Wales * &#x60;England_SE_and_Central_S&#x60; - England SE and Central South
     * @param {number} [year] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClimateApi
     */
    public climateList(dataset?: ClimateListDatasetEnum, limit?: number, offset?: number, region?: ClimateListRegionEnum, year?: number, options?: RawAxiosRequestConfig) {
        return ClimateApiFp(this.configuration).climateList(dataset, limit, offset, region, year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Climate Record ViewSet
     * @param {number} id A unique integer value identifying this climate record.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClimateApi
     */
    public climateRetrieve(id: number, options?: RawAxiosRequestConfig) {
        return ClimateApiFp(this.configuration).climateRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ClimateListDatasetEnum = {
    AirFrost: 'air_frost',
    Raindays: 'raindays',
    Rainfall: 'rainfall',
    Sunshine: 'sunshine',
    Tmax: 'tmax',
    Tmean: 'tmean',
    Tmin: 'tmin'
} as const;
export type ClimateListDatasetEnum = typeof ClimateListDatasetEnum[keyof typeof ClimateListDatasetEnum];
/**
 * @export
 */
export const ClimateListRegionEnum = {
    EastAnglia: 'East_Anglia',
    England: 'England',
    EnglandEAndNe: 'England_E_and_NE',
    EnglandN: 'England_N',
    EnglandNwAndNWales: 'England_NW_and_N_Wales',
    EnglandS: 'England_S',
    EnglandSeAndCentralS: 'England_SE_and_Central_S',
    EnglandSwAndSWales: 'England_SW_and_S_Wales',
    EnglandAndWales: 'England_and_Wales',
    Midlands: 'Midlands',
    NorthernIreland: 'Northern_Ireland',
    Scotland: 'Scotland',
    ScotlandE: 'Scotland_E',
    ScotlandN: 'Scotland_N',
    ScotlandW: 'Scotland_W',
    Uk: 'UK',
    Wales: 'Wales'
} as const;
export type ClimateListRegionEnum = typeof ClimateListRegionEnum[keyof typeof ClimateListRegionEnum];


